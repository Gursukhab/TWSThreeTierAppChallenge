pipeline {
    agent any

    tools {
        sonarScanner 'SonarScanner'  // ‚úÖ Use the tool name you added in Global Tool Config
    }

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REGISTRY = '949908266326.dkr.ecr.us-east-1.amazonaws.com'
        FRONTEND_REPO = 'sukhab_app'
        BACKEND_REPO = 'backend-app'
        IMAGE_TAG = "latest"
        NAMESPACE = "three-tier"
        SONAR_PROJECT_KEY = "sukhab-backend"
        SONAR_TOKEN = credentials('sonarqube-token')  // ‚úÖ Add your SonarQube token credentials ID here
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "üîÑ Cloning the repo"
                git url: "https://github.com/Gursukhab/TWSThreeTierAppChallenge.git", branch: "main"
            }
        }

        // ‚úÖ NEW STAGE
        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('MySonarQube') {
                        sh """
                            sonar-scanner \
                              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://localhost:9000 \
                              -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

stage('Quality Gate') {
    steps {
        timeout(time: 2, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
        }
    }
}

        stage('Login to AWS ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        mkdir -p ~/.aws

                        echo "[default]" > ~/.aws/credentials
                        echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

                        echo "[default]" > ~/.aws/config
                        echo "region=$AWS_REGION" >> ~/.aws/config

                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                    '''
                }
            }
        }

        stage('Build and Push Frontend Image') {
            steps {
                dir('Application-Code/frontend') {
                    sh """
                        docker build -t ${FRONTEND_REPO}:${IMAGE_TAG} .
                        docker tag ${FRONTEND_REPO}:${IMAGE_TAG} ${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Build and Push Backend Image') {
            steps {
                dir('Application-Code/backend/') {
                    sh """
                        docker build -t ${BACKEND_REPO}:${IMAGE_TAG} .
                        docker tag ${BACKEND_REPO}:${IMAGE_TAG} ${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Update Deployment YAMLs with Image') {
            steps {
                sh """
                    sed -i 's|image:.*|image: ${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}|' Kubernetes-Manifests-file/Backend/deployment.yaml
                    sed -i 's|image:.*|image: ${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}|' Kubernetes-Manifests-file/Frontend/deployment.yaml
                """
            }
        }

        stage('Create Namespace') {
            steps {
                sh """
                    kubectl get namespace ${NAMESPACE} || kubectl create namespace ${NAMESPACE}
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    dir('Kubernetes-Manifests-file/Database') {
                        sh '''
                            kubectl apply -f secrets.yaml
                            kubectl apply -f pv.yaml
                            kubectl apply -f pvc.yaml
                            kubectl apply -f service.yaml
                            kubectl apply -f deployment.yaml
                        '''
                    }

                    dir('Kubernetes-Manifests-file/Backend') {
                        sh '''
                            kubectl apply -f service.yaml
                            kubectl apply -f deployment.yaml
                        '''
                    }

                    dir('Kubernetes-Manifests-file/Frontend') {
                        sh '''
                            kubectl apply -f service.yaml
                            kubectl apply -f deployment.yaml
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Successfully deployed everything!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs.'
        }
    }
}
